{
  "language": "Solidity",
  "sources": {
    "contracts/test/MockV3Aggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\nimport \"@chainlink/contracts/src/v0.6/tests/MockV3Aggregator.sol\";\r\n\r\n// /**\r\n//  * @title MockV3Aggregator\r\n//  * @notice Based on the FluxAggregator contract\r\n//  * @notice Use this contract when you need to test\r\n//  * other contract's ability to read data from an\r\n//  * aggregator contract, but how the aggregator got\r\n//  * its answer is unimportant\r\n//  */\r\n// contract MockV3Aggregator is AggregatorV2V3Interface {\r\n//     uint256 public constant override version = 0;\r\n\r\n//     uint8 public override decimals;\r\n//     int256 public override latestAnswer;\r\n//     uint256 public override latestTimestamp;\r\n//     uint256 public override latestRound;\r\n\r\n//     mapping(uint256 => int256) public override getAnswer;\r\n//     mapping(uint256 => uint256) public override getTimestamp;\r\n//     mapping(uint256 => uint256) private getStartedAt;\r\n\r\n//     constructor(uint8 _decimals, int256 _initialAnswer) public {\r\n//         decimals = _decimals;\r\n//         updateAnswer(_initialAnswer);\r\n//     }\r\n\r\n//     function updateAnswer(int256 _answer) public {\r\n//         latestAnswer = _answer;\r\n//         latestTimestamp = block.timestamp;\r\n//         latestRound++;\r\n//         getAnswer[latestRound] = _answer;\r\n//         getTimestamp[latestRound] = block.timestamp;\r\n//         getStartedAt[latestRound] = block.timestamp;\r\n//     }\r\n\r\n//     function updateRoundData(\r\n//         uint80 _roundId,\r\n//         int256 _answer,\r\n//         uint256 _timestamp,\r\n//         uint256 _startedAt\r\n//     ) public {\r\n//         latestRound = _roundId;\r\n//         latestAnswer = _answer;\r\n//         latestTimestamp = _timestamp;\r\n//         getAnswer[latestRound] = _answer;\r\n//         getTimestamp[latestRound] = _timestamp;\r\n//         getStartedAt[latestRound] = _startedAt;\r\n//     }\r\n\r\n//     function getRoundData(uint80 _roundId)\r\n//         external\r\n//         view\r\n//         override\r\n//         returns (\r\n//             uint80 roundId,\r\n//             int256 answer,\r\n//             uint256 startedAt,\r\n//             uint256 updatedAt,\r\n//             uint80 answeredInRound\r\n//         )\r\n//     {\r\n//         return (\r\n//             _roundId,\r\n//             getAnswer[_roundId],\r\n//             getStartedAt[_roundId],\r\n//             getTimestamp[_roundId],\r\n//             _roundId\r\n//         );\r\n//     }\r\n\r\n//     function latestRoundData()\r\n//         external\r\n//         view\r\n//         override\r\n//         returns (\r\n//             uint80 roundId,\r\n//             int256 answer,\r\n//             uint256 startedAt,\r\n//             uint256 updatedAt,\r\n//             uint80 answeredInRound\r\n//         )\r\n//     {\r\n//         return (\r\n//             uint80(latestRound),\r\n//             getAnswer[latestRound],\r\n//             getStartedAt[latestRound],\r\n//             getTimestamp[latestRound],\r\n//             uint80(latestRound)\r\n//         );\r\n//     }\r\n\r\n//     function description() external view override returns (string memory) {\r\n//         return \"v0.6/tests/MockV3Aggregator.sol\";\r\n//     }\r\n// }\r\n\r\n// // MockOracle\r\n// // Function signatures, event signatures, log topics\r\n"
    },
    "@chainlink/contracts/src/v0.6/tests/MockV3Aggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\nimport \"../interfaces/AggregatorV2V3Interface.sol\";\n\n/**\n * @title MockV3Aggregator\n * @notice Based on the FluxAggregator contract\n * @notice Use this contract when you need to test\n * other contract's ability to read data from an\n * aggregator contract, but how the aggregator got\n * its answer is unimportant\n */\ncontract MockV3Aggregator is AggregatorV2V3Interface {\n  uint256 constant public override version = 0;\n\n  uint8 public override decimals;\n  int256 public override latestAnswer;\n  uint256 public override latestTimestamp;\n  uint256 public override latestRound;\n\n  mapping(uint256 => int256) public override getAnswer;\n  mapping(uint256 => uint256) public override getTimestamp;\n  mapping(uint256 => uint256) private getStartedAt;\n\n  constructor(\n    uint8 _decimals,\n    int256 _initialAnswer\n  ) public {\n    decimals = _decimals;\n    updateAnswer(_initialAnswer);\n  }\n\n  function updateAnswer(\n    int256 _answer\n  ) public {\n    latestAnswer = _answer;\n    latestTimestamp = block.timestamp;\n    latestRound++;\n    getAnswer[latestRound] = _answer;\n    getTimestamp[latestRound] = block.timestamp;\n    getStartedAt[latestRound] = block.timestamp;\n  }\n\n  function updateRoundData(\n    uint80 _roundId,\n    int256 _answer,\n    uint256 _timestamp,\n    uint256 _startedAt\n  ) public {\n    latestRound = _roundId;\n    latestAnswer = _answer;\n    latestTimestamp = _timestamp;\n    getAnswer[latestRound] = _answer;\n    getTimestamp[latestRound] = _timestamp;\n    getStartedAt[latestRound] = _startedAt;\n  }\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    override\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    )\n  {\n    return (\n      _roundId,\n      getAnswer[_roundId],\n      getStartedAt[_roundId],\n      getTimestamp[_roundId],\n      _roundId\n    );\n  }\n\n  function latestRoundData()\n    external\n    view\n    override\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    )\n  {\n    return (\n      uint80(latestRound),\n      getAnswer[latestRound],\n      getStartedAt[latestRound],\n      getTimestamp[latestRound],\n      uint80(latestRound)\n    );\n  }\n\n  function description()\n    external\n    view\n    override\n    returns (string memory)\n  {\n    return \"v0.6/tests/MockV3Aggregator.sol\";\n  }\n}"
    },
    "@chainlink/contracts/src/v0.6/interfaces/AggregatorV2V3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\nimport \"./AggregatorInterface.sol\";\nimport \"./AggregatorV3Interface.sol\";\n\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface\n{\n}\n"
    },
    "@chainlink/contracts/src/v0.6/interfaces/AggregatorInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\ninterface AggregatorInterface {\n  function latestAnswer()\n    external\n    view\n    returns (\n      int256\n    );\n  \n  function latestTimestamp()\n    external\n    view\n    returns (\n      uint256\n    );\n\n  function latestRound()\n    external\n    view\n    returns (\n      uint256\n    );\n\n  function getAnswer(\n    uint256 roundId\n  )\n    external\n    view\n    returns (\n      int256\n    );\n\n  function getTimestamp(\n    uint256 roundId\n  )\n    external\n    view\n    returns (\n      uint256\n    );\n\n  event AnswerUpdated(\n    int256 indexed current,\n    uint256 indexed roundId,\n    uint256 updatedAt\n  );\n\n  event NewRound(\n    uint256 indexed roundId,\n    address indexed startedBy,\n    uint256 startedAt\n  );\n}\n"
    },
    "@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\ninterface AggregatorV3Interface {\n\n  function decimals()\n    external\n    view\n    returns (\n      uint8\n    );\n\n  function description()\n    external\n    view\n    returns (\n      string memory\n    );\n\n  function version()\n    external\n    view\n    returns (\n      uint256\n    );\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(\n    uint80 _roundId\n  )\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}